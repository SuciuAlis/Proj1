class Node
{
	Node(localIpAddress, localPortNumber, targetIpAddress, targetPortNumber)
	{
		// initializeserver
		server = new Server(localIpAddress, localPortNumber); // TODO: check how to initialize serer on a specific address
		// the server must wait for data receival in the brackground, i.e. waiting for data must not block the execution on the code - it must not be blocking (asynchronous waiting)
		// TODO: check for signal/slot mechanisms, observer pattern which allow the code to not be blocking

		//need a handler: a function call when data is received
		{
			socket = new Socket(targetIpAddress, targetPortNumber);
			socket.send(m_targetAddress, m_targetPort, incremented_received_value)
		}
	}

	initializeCommunication() // the same handler when the server receives any data
	{
		socket = new Socket(targetIpAddress, targetPortNumber);
		socket.send(m_targetAddress, m_targetPort, incremented_received_value)
	}	

//members:
	TCPServer m_server;
	m_localAddress
	m_localPort
	m_targetAddress
	m_targetPort
}

main()
{
	Node n1(127.0.0.1, 5001, 127.0.0.2, 5002);
	Node n2(127.0.0.2, 5002, 127.0.0.3, 5003);
	Node n3(127.0.0.3, 5003, 127.0.0.1, 5001);

	n1.initializeCommunication();
}